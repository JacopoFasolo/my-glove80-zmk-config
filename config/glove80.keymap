/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        hrm_lw: hrm_lw {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM long wait";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            flavor = "tap-preferred";
        };

        lth: lth {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Tap Hold";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        hrm_e_acc: hrmm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM e acc";
            bindings = <&e_acc_upp>, <&e_acc>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_8 &kt RIGHT_ALT>;
            label = "EURO";
        };

        e_acc_upp: e_acc_upp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_0 &kp KP_NUMBER_0 &kt RIGHT_ALT>;
            label = "E_ACC_UPP";
        };

        a_acc: a_acc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kt RIGHT_ALT>;
            label = "A_ACC";
        };

        e_acc: e_acc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_3 &kp KP_NUMBER_2 &kt RIGHT_ALT>;
            label = "E_ACC";
        };

        i_acc: i_acc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_3 &kp KP_NUMBER_6 &kt RIGHT_ALT>;
            label = "I_ACC";
        };

        o_acc: o_acc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_2 &kt RIGHT_ALT>;
            label = "O_ACC";
        };

        u_acc: u_acc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RIGHT_ALT &kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_9 &kt RIGHT_ALT>;
            label = "U_ACC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2           &kp F3           &kp F4             &kp F5                                                                                                    &kp F6          &kp F7         &kp F8           &kp F9          &kp F10
&kp F11           &kp N1           &kp N2           &kp N3             &kp N4           &kp N5                                                                           &kp N6  &kp N7          &kp N8         &kp N9           &kp N0          &kp F12
&kp ESCAPE        &kp Q            &kp W            &lth 2 E           &hrm_lw LC(R) R  &hrm ENTER T                                                                     &kp Y   &kp U           &kp I          &kp O            &kp P           &kp KP_DIVIDE
&hrm LS(TAB) TAB  &hrm LEFT_ALT A  &hrm LEFT_GUI S  &hrm LEFT_SHIFT D  &hrm LCTRL F     &hrm SPACE G                                                                     &kp H   &hrm LCTRL J    &hrm LSHIFT K  &hrm LGUI L      &hrm LALT SEMI  &kp SLASH
&to 3             &kp Z            &hrm LC(X) X     &hrm LC(C) C       &hrm LC(V) V     &kp B         &kp LSHFT  &kp LCTRL  &mo 3       &mkp LCLK  &mkp RCLK  &kp ENTER  &kp N   &kp M           &kp COMMA      &kp DOT          &kp MINUS       &kp PG_UP
&magic 4 0        &kp LEFT_GUI     &kp LEFT_ALT     &kp LC(LS(TAB))    &kp LC(TAB)                    &kp BSPC   &mo 1      &kp DELETE  &kp HOME   &kp END    &kp SPACE          &kp LEFT_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp DOWN_ARROW  &kp PG_DN
            >;
        };

        symbols {
            bindings = <
&trans  &trans  &trans            &trans       &trans                                                                                                &trans                 &trans             &trans                 &trans           &trans
&trans  &u_acc  &o_acc            &i_acc       &hrm_e_acc 0 0     &a_acc                                                            &trans           &trans                 &trans             &trans                 &trans           &trans
&trans  &trans  &kp LS(NUMBER_4)  &euro        &kp SINGLE_QUOTE   &kp LS(NUMBER_6)                                                  &kp PIPE         &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp LS(RIGHT_BRACKET)  &kp TILDE        &trans
&trans  &kp AT  &kp EXCL          &kp EQUAL    &kp DOUBLE_QUOTES  &kp DOT                                                           &kp AMPERSAND    &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LS(LEFT_BRACKET)   &kp PERCENT      &trans
&trans  &trans  &kp LS(COMMA)     &kp LS(DOT)  &kp GRAVE          &kp HASH          &trans  &trans  &trans  &trans  &trans  &trans  &kp EXCLAMATION  &kp KP_PLUS            &kp KP_MINUS       &kp KP_DIVIDE          &kp KP_MULTIPLY  &trans
&trans  &trans  &trans            &trans       &trans                               &trans  &trans  &trans  &trans  &trans  &trans                   &trans                 &trans             &trans                 &trans           &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                             &trans          &trans          &trans           &trans           &trans
&trans  &trans  &trans  &trans  &trans     &trans                                                  &trans          &trans          &mkp MCLK       &trans           &trans           &trans
&trans  &trans  &trans  &trans  &mkp LCLK  &trans                                                  &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_LEFT   &trans
&trans  &trans  &trans  &trans  &mkp RCLK  &trans                                                  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &kp A           &trans          &trans           &trans           &trans
&trans  &trans  &trans  &trans  &trans             &trans  &trans  &trans  &trans  &trans  &trans                  &trans          &trans          &trans           &trans           &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp K_PLAY_PAUSE  &kp C_VOL_DN  &kp C_VOL_UP   &kp K_MUTE       &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM        &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &kp HOME    &kp UP      &kp END    &kp END                                                    &kp RPAR   &kp KP_N7         &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4         &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&to 0         &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1         &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0         &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 5
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
